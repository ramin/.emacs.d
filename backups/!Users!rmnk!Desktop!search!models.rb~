# Database connection
ActiveRecord::Base.establish_connection(
  :adapter =>   "mysql",
  :host =>      "localhost",
  :database =>  "preview",
  :username =>  "assetpedprometh",
  :password =>  "7stocko71066",
  :socket =>    "/var/run/mysqld/mysqld.sock"
)

ActiveRecord::Base.connection.execute 'SET NAMES utf8'

class Node < ActiveRecord::Base
  belongs_to :user
  
  self.inheritance_column = :_type_disabled
  self.record_timestamps = false    
  
  named_scope :delta, :conditions => { :is_stock => 1}
  
  def stocks    
    if self[:type] == "comment"
      tickers = NodeTaxonTerm.find(:all, :limit => 100, :conditions =>["node_id = ? AND taxon = ?", self.parent_id, "tickers"])     
    else
      tickers = NodeTaxonTerm.find(:all, :limit => 100, :conditions =>["node_id = ? AND taxon = ?", self.id, "tickers"])
    end
    stocks = Array.new
    tickers.each do | stock |
      unless stock.nil?
        stocks.push("LON:#{stock.term.ticker}")
        stocks.push("#{stock.term.ticker}.L")
        stocks.push("#{stock.term.ticker}")
        stocks.push("#{stock.term.name}")      
      end  
    end  
    stocks.join(", ") unless stocks.empty?
  end
  
  def tags   
    if self[:type] == "comment"
      item_tags = NodeTaxonTerm.find(:all, :limit => 5, :conditions =>["node_id = ? AND taxon = ?", self.parent_id, "tags"])     
    else
      item_tags = NodeTaxonTerm.find(:all, :limit => 5, :conditions =>["node_id = ? AND taxon = ?", self.id, "tags"])
    end

    tags = Array.new
    item_tags.each do | stock |
      unless stock.term.nil?
        tag = stock.term.name
        tags.push("#{tag}") unless tags.include? "#{tag}"
      end  
    end  
    
    if self[:type] == "comment"
      tickers = NodeTaxonTerm.find(:all, :limit => 100, :conditions =>["node_id = ? AND taxon = ?", self.parent_id, "tickers"])     
    else
      tickers = NodeTaxonTerm.find(:all, :limit => 100, :conditions =>["node_id = ? AND taxon = ?", self.id, "tickers"])
    end

    tickers.each do |ticker|
      ticker.term.parents.each do |p|
        tags.push("#{p.name}") unless tags.include? "#{p.name}"
      end
    end    
    tags.join(", ")
  end
  
  def category
    stock = NodeTaxonTerm.find(:all, :limit => 50, :conditions =>["node_id = ? AND taxon = ?", self.id, "tickers"])
        
    category = (stock.length > 1) ? nil : stock.first
    
    if category.nil?
      category = NodeTaxonTerm.find(:all, :limit => 5, :conditions =>["node_id = ? AND taxon = 'tags'", self.id]).first
      if category.nil?
        category = stock.first        
      end      
    end
        
    (category.term.is_stock) ? "#{category.term.name} #{category.term.ticker}" : "#{category.term.name}" unless category.nil?
  end
  
end

class NodeTaxonTerm < ActiveRecord::Base  
  self.inheritance_column = :_type_disabled
  belongs_to :term
  belongs_to :user  
end  

class Term < ActiveRecord::Base

  named_scope :stocks, :conditions => { :is_stock => 1}
  named_scope :topics, :conditions => ["is_stock = 0 AND banned = 0 AND alias_id IS NULL"]
  
  has_many :node_taxon_terms
  
  self.inheritance_column = :_type_disabled
  
  def parent
    begin
      Term.find self.owner_id
    rescue
      Term.new
    end    
  end
  
  def underneath
    begin
      Term.find :all, :conditions => [ "owner_id = ?", self.id]
    rescue => e    
      Array.new
    end    
  end
  
  def parents_string
    out = Array.new
    parents.each do |term|
      out.push("#{term.name}#{(term.is_stock == 1) ? ' (' + term.ticker + ')' : ''}")
    end
    out.join(", ")  
  end
  
  def children_string
    children.join(", ")
    out = Array.new
    children.each do |term|
      out.push("#{term.name}#{(term.is_stock == 1) ? ' (' + term.ticker + ')' : ''}")
    end
    out.join(", ")  
  end
  
  def aliases
    out = Array.new
    aliases = Term.find :all, :conditions => ["alias_id = ?", self.id]
    aliases.each do |term|
      out.push("#{term.name}#{(term.is_stock == 1) ? ' (' + term.ticker + ')' : ''}")
    end
    out.join(", ")
  end
    
  def parents(include_self = false)

    parents = Array.new
    
    current = self
    
    for i in 1..3 do
      current = current.parent
    
      unless current.name.nil?
        parents.push(current)
      end      
    
    end      
    parents
  end
  
  def children(include_self = false)

    c = Array.new
    
    current = self
    
    for i in 1..5 do
      current.underneath.each do |child|
        unless child.name.nil?
          c.push(child)
          current = child
        end      
      end      
    end      
    c
  end
  
  
end

class User < ActiveRecord::Base  
  has_many :nodes
  has_one :profile    
end

class Profile < ActiveRecord::Base  
  belongs_to :user
end


